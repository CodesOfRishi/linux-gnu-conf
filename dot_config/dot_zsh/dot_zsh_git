alias gs="git status"
alias gd="git diff"
alias gr="git restore"
alias ga="git add"
alias gc="git commit"
alias gp="git push"
alias gm="git merge"
alias gw="git switch"
alias gb="git branch"
alias gt="git tag"

# `g sh` for `git show
# `g stash` for `git stash`
# `g cc` for conventional commits info
g() {
	local arguments=${*:2}
	if [[ $1 = "sh" || $1 = "show" ]]; then
		# use `g sh` for `git show`
		git show "${arguments}"
	elif [[ $1 = "st" || $1 = "stash" ]]; then
		# confirm before running `git stash` if the argument is neither `save` nor `list`
		if [[ -n $2 && $2 != "save" && $2 != "list" ]]; then
			printf '%s\n' "> ${arguments} <"

			local _confirm
			printf '%s' "Continue (Y/n)? "
			read -r _confirm

			if [[ ${_confirm} = "y" || ${_confirm} = "Y" ]]; then
				git stash ${arguments}
			else
				printf '%s\n' "Stash aborted!!"
			fi
		else
			git stash ${arguments}
		fi
	elif [[ $1 = "cc" ]]; then
		local colr1=$( tput setaf 12 )
		local colr2=$( tput setaf 11 )
		local reset=$( tput sgr0 )
		printf '%s\n' "${colr1}Conventional Commits:"
		printf '%s\n' "${colr1}feat${reset} ..................... ${colr2}new features for the user"
		printf '%s\n' "${colr1}fix${reset} ...................... ${colr2}bug fix for the user"
		printf '%s\n' "${colr1}docs${reset} ..................... ${colr2}changes to the documentation"
		printf '%s\n' "${colr1}style${reset} .................... ${colr2}changes that do not affect the meaning of the code (white-space, formatting, missing semi-colron, etc)"
		printf '%s\n' "${colr1}refactor${reset} ................. ${colr2}refactoring production code; neither fixes a bug nor adds a feature"
		printf '%s\n' "${colr1}perf${reset} ..................... ${colr2}a code change that improvemes performance"
		printf '%s\n' "${colr1}test${reset} ..................... ${colr2}adding missing tests, refactoring tests, etc"
		printf '%s\n' "${colr1}build${reset} .................... ${colr2}changes that affect the build system or external dependencies"
		printf '%s\n' "${colr1}revert${reset} ................... ${colr2}reverts the previous commit"
		printf '%s\n' "${colr1}chore${reset} .................... ${colr2}updating grunt tasks (other changes that don't modify src or test files)"
		printf '\n%s\n' "${reset}References:"
		printf '%s\n' "https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716"
		printf '%s\n' "https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716#gistcomment-3198987"
		printf '%s\n' "https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716#gistcomment-3460311"
	else
		printf '%s\n' "$1 is either invalid or not supported!" 1>&2
		return 1
	fi
}
